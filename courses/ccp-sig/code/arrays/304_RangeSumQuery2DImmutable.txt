class NumMatrix(object):

    def __init__(self, matrix):
        """
        :type matrix: List[List[int]]
        """
        if not matrix or not matrix[0]:
            self.sum_matrix = [[0]]
            return
        
        rows, cols = len(matrix), len(matrix[0])
        # Create a (rows+1) x (cols+1) prefix sum matrix
        self.sum_matrix = [[0]*(cols+1) for _ in range(rows+1)]
        
        for i in range(rows):
            for j in range(cols):
                self.sum_matrix[i+1][j+1] = (
                    matrix[i][j] 
                    + self.sum_matrix[i][j+1]
                    + self.sum_matrix[i+1][j]
                    - self.sum_matrix[i][j]
                )

    def sumRegion(self, row1, col1, row2, col2):
        """
        :type row1: int
        :type col1: int
        :type row2: int
        :type col2: int
        :rtype: int
        """
        return (
            self.sum_matrix[row2+1][col2+1]
            - self.sum_matrix[row1][col2+1]
            - self.sum_matrix[row2+1][col1]
            + self.sum_matrix[row1][col1]
        )
