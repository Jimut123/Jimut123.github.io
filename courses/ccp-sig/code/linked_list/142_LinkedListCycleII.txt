# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head is None or head.next is None:
            return None
        head1=head;head2=head;head3=head
        while head2.next is not None and head2.next.next is not None:
            head1=head1.next
            head2=head2.next.next
            if head1==head2:
                break
        if head2.next is None or head2.next.next is None:
            return None
        pos=0
        while head3 is not head1:
            head3=head3.next
            head1=head1.next
            pos+=1
        return head1
